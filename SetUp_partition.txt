파이션 생성 후 사용을 위해 해야하는 작업
    1. 파일 시스템 형식 설정
        -파일 시스템 형식 : 장치에 자료를 저장하는 형힉

        -운영체제와 버전에 따라 다를 수 있다.
            > 사전에 확인 필요
        
        -현재 시스템에서 제공하는 파일 시스템 형식은 명령어를 통해 확인이 가능하다.
            > ls -l /usr/sbin/mkfs*

        -filesystem(partition)을 처음 생성하면 형식 지정을 하지 않는다.
            >명령어를 이용하여 파일 시스템 형식을 지정해야한다.

        -파일 시스템 형식 지정 명령어 : mkfs
            mkfs -t <FStype> <partition>
            (*예시 : mkfs -t xfs /dev/sdb1
                    /dev/sdb1 파티션의 파일 시스템 형식을 xfs로 지정한다.)
            mkfs.<FStype> <partition>
            (*예시 : mkfs.xfs /dev/sdb1
                    /dev/sdb1 파티션의 파일 시스템 형식을 xfs로 지정한다.)
            (*CentOS 7 버전에서는 xfs를 기본 파일 시스템 형식으로 적용한다.)
            명령어 옵션 : 
            f : 덮어쓴다.
            (*예시 : mkfs.xfs -f /dev/sdb1
                    /dev/sdb1 파티션의 파일 시스템 형식을 xfs로 지정한다.)

        -파일 시스템 형식 확인 명령어 : blkid
            blkid <partition>
            (*예시 : blkid /dev/sdb1
                    /dev/sdb1파티션의 파일 시스템 등등의 정보를 확인한다.)

        -파일 시스템 형식 지정은 빠른 포캣과 비슷한 역할을 수행한다.
            >장치 내부에 있는 자료들의 사용이 불가능 할 수 있다.
        
        -파일 시스템 형식은 자료를 넣을 장치에만 지정한다
            >primary/logical : 반드시 지정, extended : 지정 안함


    2. 접근 경로 할당
        -장치에 접근하여 사용할 수 있도록 장치를 디렉토리에 덮어씌우는 작업
            >장치파일을 직접적으로 사용할 수 없기 대문에 장치를 사용하기 위해 반드시 해야하는 작업

        -마운트 명령

            장치 출력   : mount (*현재 운영체제에 연결된 모든 장치 출력)
            (*예시 : mount
            출력 예시 : 
                pstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)
                cgroup on /sys/fs/cgroup/devices type cgroup (rw,nosuid,nodev,noexec,relatime,devices)
                cgroup on /sys/fs/cgroup/cpu,cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpuacct,cpu)
                cgroup on /sys/fs/cgroup/net_cls,net_prio type cgroup (rw,nosuid,nodev,noexec,relatime,net_prio,net_cls)
                cgroup on /sys/fs/cgroup/pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)
                cgroup on /sys/fs/cgroup/perf_event type cgroup (rw,nosuid,nodev,noexec,relatime,perf_event)
                cgroup on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)
                cgroup on /sys/fs/cgroup/freezer type cgroup (rw,nosuid,nodev,noexec,relatime,freezer)
                cgroup on /sys/fs/cgroup/hugetlb type cgroup (rw,nosuid,nodev,noexec,relatime,hugetlb)
                cgroup on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)
                cgroup on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)
                configfs on /sys/kernel/config type configfs (rw,relatime)
                /dev/sda3 on / type xfs (rw,relatime,attr2,inode64,noquota)
                systemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=34,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=13806)
                debugfs on /sys/kernel/debug type debugfs (rw,relatime)
                mqueue on /dev/mqueue type mqueue (rw,relatime)
                hugetlbfs on /dev/hugepages type hugetlbfs (rw,relatime)
                fusectl on /sys/fs/fuse/connections type fusectl (rw,relatime)
                /dev/sda1 on /boot type xfs (rw,relatime,attr2,inode64,noquota)
                sunrpc on /var/lib/nfs/rpc_pipefs type rpc_pipefs (rw,relatime)
                tmpfs on /run/user/42 type tmpfs (rw,nosuid,nodev,relatime,size=99568k,mode=700,uid=42,gid=42)
                tmpfs on /run/user/0 type tmpfs (rw,nosuid,nodev,relatime,size=99568k,mode=700)
                /dev/sda1 on /mnt/cdrom type xfs (rw,relatime,attr2,inode64,noquota)

            이 중에서 잠시 '/dev/sda1 on /mnt/cdrom type xfs (rw,relatime,attr2,inode64,noquota)' 이 구문에 집중해보자면
            /dev/sda1 이 /mnt/cdrom 에 연결되어있으며
            type xfs 로 파일 시스템 형식이 xfs인것을 알 수 있다.
            )
            
            장치 용량 출력 : df -h (*현재 운영체제에 연결된 모든 장치에 관한 내용)
            (*
            출력 예시 :
                Filesystem      Size  Used Avail Use% Mounted on
                devtmpfs        471M     0  471M   0% /dev
                tmpfs           487M     0  487M   0% /dev/shm
                tmpfs           487M  8.2M  478M   2% /run
                tmpfs           487M     0  487M   0% /sys/fs/cgroup
                /dev/sda3        17G  4.6G   13G  27% /
                /dev/sda1      1014M  169M  846M  17% /boot
                tmpfs            98M   12K   98M   1% /run/user/42
                tmpfs            98M     0   98M   0% /run/user/0

            )
            
            마운트      : mount <장치명> <마운트포인트>
            (*
            입력 : mount /dev/sdb1 /mnt/cdrom
            /mnt/cdrom 파일에 /dev/sdb1 파티션을 마운트한다.

            입력 : mount /dev/sda1 /mnt/cdrom
            /mnt/cdrom 파일에 /dev/sda1 파티션을 마운트한다.

            )

            마운트 헤제 : umount <장치명> or umount <마운트포인트>

            (*여기서 말하는 단어 주의점
                장치명  : 장치의 이름을 절대경로로 작성
                마운트포인트 : 디렉토리의 이름을 절대경로로 작성    )

        -모든 마운트 된 장치는 시스템이 종료되면서 마운트가 헤제된다.
            >부팅 과넞ㅇ에서 자동으로 마운트 되도록 설정 된 장치만 마운트가 된다(오토 마운트)

        -마운트 작업 시 주의사항

        1) 마운트, 마운트 헤제는 마운트포인트의 밖에서 진행하는것을 극히 권장한다.
        2) 장치와 마운트포인트는 1:1로 마운트한다.
            >하나의 장치를 여러 마운트포인트에 마운트 하지 않아야 한다.
            >여러 개의 장치를 하나의 마운트포인트에 마운트 하지 않아야 한다.


        (*문제
        <partition>     <mount point>
        1번 500M(b)     /kg
        2번 300M        /mp
        5번 1G          /sp
        6번 200M        /hp

        풀이:

        fdisk /dev/sdb
        입력해서 /dev/sdb 장치관리 진입

        Command (m for help):
        출력되면
        n
        입력하고 엔터 눌러서 '파티션 생성'하기

        p primary (0 primary, 0 extended, 4 free)
        e extended
        Select (default p) :
        이렇게 되는데
        (0 primary, 0 extended, 4 free)
        이 부분은 0 extended만 확인되면 크게 신경쓰지 않아도 된다.
        그냥 엔터를 누르거나 p 를 입력해서
        primary 파티션을 생성해준다.
        
        Last sector, +sector or +size{K,M,G} (2048-4194303, default 4194303):
        여기에서 용량을 적어준다.
        우리는 1번 파티션에 500M(byte)를 지정해줘야하니 +500M을 적고서 엔터를 눌러 선택확정을 한다.

        다시
        p primary (0 primary, 0 extended, 4 free)
        e extended
        Select (default p) :
        이 부분이 나오는데, 그냥 엔터를 누르거나 p 를 입력해서 primary 파티션을 또 설정해준다.
        Last sector, +sector or +size{K,M,G} (2048-4194303, default 4194303):
        이런 문장이 또 나온다면, 이번에는 2번째 파티션의 300M를 넣어야하니 +300M을 적어준다.
        
        다시
        p primary (0 primary, 0 extended, 4 free)
        e extended
        Select (default p) :
        이 부분이 나오면, 이제는 extended로 처리를 해줘서 3,4번을 처리(?)해준다.

        그 다음에 
        Command (m for help):
        이 문장이 다시 나오게 된다면 5,6번을 처리해줄 때가 됐으니
        다시 n 을 입력하고 엔터를 친다.

        아까와는 다르게
        Partition type :
            p   primary (2 primary, 1 extended, 1 free)
            l   logical (numbered from 5)
        Select (default p) :
        이러한 구문이 나오는데
        이제는 primary 말고 logical 로 설정해주기 위해 l을 넣고서 엔터를 친다.

        Last sector, +sector or +size{K,M,G} (2048-4194303, default 4194303):
        다시 이런 구문이 나오면 5번 파티션(l   logical (numbered from 5))에 대한 용량을 넣어야 하니
        +1G를 넣고서 엔터를 친다.

        
        Command (m for help):
        n을 넣고
        Partition type :
            p   primary (2 primary, 1 extended, 1 free)
            l   logical (numbered from 5)
        Select (default p) :
        l을 넣고
        +200M를 친다.

        Command (m for help):
        이제 파티션 관련해서 직접수행해야할 작업들은 끝이 났으니

        p를 입력하고 끝낸다.

        mkfs.xfs /dev/sdb1
        mkfs.xfs /dev/sdb2
        mkfs.xfs /dev/sdb5
        mkfs.xfs /dev/sdb6
        을 넣어서 파일 시스템 형식을 지정해주고

        mkdir /kg /mp /sp /hp
        를 넣어서 마운트시킬 파일을 만들고

        mount /dev/sdb1 /kg
        mount /dev/sdb2 /mp
        mount /dev/sdb5 /sp
        mount /dev/sdb6 /hp
        를 입력해서 각 파일에 파티션을 설정해준다.
        
        )






