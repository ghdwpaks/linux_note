압축
    - 파일의 용량을 줄이기 위해 사용
    - 원본 파일 자체가 압축 된다(복사본 생성 후 압축하는 작업 X)
    - 여러 파일 동시에 압축하면 각각의 파일 개별 압축
    - 디렉토리 압축 X

    - 명령어
    압축형식		압축		압축해제

    .zip		    zip		    unzip
    .gz		        gzip		gunzip (gzip -d)
    .bz2		    bzip2		bunzip2 (bzip2 -d)

    tar
        - Tape ARchive; 초창기에는 여러 파일을 하나의 파일로 묶어서 백업하는 용도로 사용
        - 여러 파일을 하나의 tar 파일로 묶어주기 때문에 압축 가능

        - 파일을 담을 공간을 만들고 거기에 파일을 담아주는 개념
            > 하나의 tar 파일로 묶을 대상들의 용량이 커질수록 tar 파일의 용량이 커진다
        + tar 파일의 크기는 정해져 있다

        - 사용 형식
            tar 파일 생성	    : tar cvf 생성할이름.tar 대상 [대상] ... [대상]
                (* tar cvf test.tar ./vim-*
                ./test.tar 이라는 압축 파일 안에 '파일 이름 앞에 ./vim-이 붙은 파일 전부'를 넣는다. )
            tar 파일 내부 확인	: tar tvf <tar 파일명>
                (*      tar tvf test.tar
                        ./test.tar 이라는 압출 파일 안에 뭐가 있는지 본다.

                    출력 예시 :
                    -rw-r--r-- itbank/itbank 1239584 2021-10-06 20:03 ./vim-X11-7.4.629-7.el7.x86_64.rpm
                    -rw-r--r-- itbank/itbank 6205496 2021-10-06 20:03 ./vim-common-7.4.629-7.el7.x86_64.rpm
                    -rw-r--r-- itbank/itbank 1105904 2021-10-06 20:03 ./vim-enhanced-7.4.629-7.el7.x86_64.rpm
                    -rw-r--r-- itbank/itbank   11144 2021-10-06 20:03 ./vim-filesystem-7.4.629-7.el7.x86_64.rpm
                    -rw-r--r-- itbank/itbank  453600 2021-10-06 19:18 ./vim-minimal-7.4.629-7.el7.x86_64.rpm    )
            tar 파일 해체	    : tar xvf <tar 파일명>
                (*
                    tar xvf /home/itbank/test.tar
                    지금 현재 위치한 디렉터리에 /home/itbank/test.tar 를 푼다.
                )

        * 옵션
            z	: gzip 압축/압축해제를 함께 진행
                (* 예시 : 
                tar zcvf test_test.tar.gz ./vim-*
                ./test_test.tar.gz 이라는 압축 파일 안에 '파일 이름 앞에 ./vim-이 붙은 파일 전부'를 넣는다. 

                zcvf 와 앞서 사용했던 cvf와 다른점은 '크기'이다. z옵션이 붙어 gzip을 이용한다면 압축률이 좋다.
                zcvf을 이용할 시 파일 크기 : 8833647
                cvf 를 이용할 시 파일 크기 : 9021440
                )
            j	: bzip2 압축/압축해제를 함께 진행
                (*예시 : 
                tar jcvf ./test_test2.tar.bz2 ./vim-*
                ./test_test.tar.bz2 이라는 압축 파일 안에 '파일 이름 앞에 ./vim-이 붙은 파일 전부'를 넣는다. 

                줄리안 시워드가 Burrows-Wheeler transform 블록 정렬 알고리즘과 Huffman coding 을 사용해 만든 압축 프로그램 
                gzip과 일반 tar 압축에 비해 효율이 좋을 때도 있다. 그만큼 시간이 오래 걸린다.
                항상 효율이 좋은건 아닌거같다.
                )

    rpm
        - redhat package manager; 패키지를 이용한 프로그램/서비스 관리

        * 패키지 : 프로그램을 나눠놓은 조각

        - Linux는 kernel부터 시작하여 모든 구성이 패키지로 이루어져 있고, 패키지는 다른 패키지와 의존 관계에 놓여 있는 경우가 많다
            > 패키지 설치/삭제 과정에서 의존성 관련 오류가 굉장히 많이 나온다

        - rpm은 redhat에서 처음 만들어서 도입했고, redhat 기반의 모든 Linux에서는 rpm 명령어 사용
            > devian 기반의 Linux에서는 rpm이 아닌 dpkg 명령어 사용

        - 사용 형식
            설치	: rpm -ivh 패키지명-버전.아키텍처.rpm
                    (*
                    입력 예시 : rpm -ivh vim-minimal-7.4.629-7.el7.x86_64.rpm
                    'vim-minimal-7.4.629-7.el7.x86_64.rpm'을 설치한다.
                    )
            
            확인	: rpm -qa | grep 패키지명
                    (*
                    입력 예시 : rpm -qa | grep vim-
                    설치된 rpm 패키지들중에 'vim-'라는 글자가 들어간 패키지가 뭔지 알려준다.

                    출력 예시 :
                        vim-filesystem-7.4.629-7.el7.x86_64
                        vim-minimal-7.4.629-7.el7.x86_64
                        vim-common-7.4.629-7.el7.x86_64
                        vim-enhanced-7.4.629-7.el7.x86_64
                        vim-X11-7.4.629-7.el7.x86_64
                    )


            삭제	: rpm -e 패키지명[-버전.아키텍처]
                    (*
                    입력 예시 : rpm -e vim
                    vim과 관련된 패키지들을 전부 삭제한다.
                    )

        - 패키지 이름 구조

            vim-filesystem-7.4.629-7.el7.x86_64
            <------------>|<----------->|<---->
            패키지명	    버전	     아키텍처

            1. 패키지명
            패키지명은 한 단어이거나 - 기호를 이용하여 여러 단어의 조합으로 구성되어 있다
            (이때 숫자만 단독으로 나오는 경우가 없기 때문에 버전과 구별이 가능)

            패키지명 영역이 한 단어로 구성되어 있으면 해당 패키지로 설치되는 프로그램 or 서비스 이름을 나타낸다

            패키지명 영역이 여러 단어로 구성되어 있으면 첫 단어가 설치되는 프로그램 or 서비스 이름을 나타내고
            뒤에 이어지는 단어들이 세부 역할을 의미한다

            2. 버전
            버전은 여러가지 세부 버전으로 구성

                7	: major
                4	: minor
                629	: patch
                7	: release
                el7	: OS

                * 운영체제 버전 예시
                el7	= centos 7.X
                el7_9	= centos 7.9
                centos	= centos all version
                <생략>	= all OS

            3. 아키텍처
            CPU의 bit와 관련되어서 특정 수준의 CPU 이상에서 사용 가능하다 라는 의미
                > CPU의 bit수는 한 번에 처리 가능한 데이터의 bit 수
                32bit	: i386, i586, i686
                64bit	: x86_64
                noarch	: 32bit CPU와 64bit CPU 혼용

        - 의존성 오류
            1. 확인 방법
                A is needed by B	: B에게 A가 필요하다

                1) 설치 할 때
                    B를 설치하기 위해 A가 먼저 설치되어야 한다

                2) 삭제 할 때
                    B에게 A가 필요하기 때문에 A를 지울 수 없다

            2. 해결 방법
                1) 설치 할 때
                A를 먼저 설치하고 다시 B를 설치
                (단, 버전이 함께 나오는 경우에 의존성 오류 메세지에 나오는 버전에 맞춰서 설치)

                2) 삭제 할 때
                B를 먼저 삭제하고 다시 A를 삭제
                (단, B가 다른 프로그램 or 시스템의 중요 요소인 경우에는 B는 삭제 X, 의존성 오류 무시)

       

            3. 의존성 오류 메세지에 패키지명이 아닌 다른 내용이 출력되면?
                1) 파일의 절대경로
                > 패키지에 해당 파일이 포함되어 있는 경우(일반적으로 삭제 할 때 출력)
                파일명을 패키지 이름으로 대체해서 메세지를 읽어 준다

                2) lib~~~.so.숫자(~~~)
                > ~~~ 부분이 패키지를 의미(설치/삭제 할 때 전부 출력)
                해당 의존성 오류 메세지를 검색하여 패키지명 확인

                3) pkgconfig(~~~)
                > ~~~ 부분이 패키지를 의미(일반적으로 설치 할 때 출력)
                해당 의존성 오류 메세지를 검색하여 패키지명 확인

            * 의존성 오류 무시 --nodeps

                보조옵션 nodeps를 사용하면 의존성 오류를 무시할 수 있다

                nodeps 보조옵션을 남용하면 다른 프로그램 or 시스템에 오류가 발생할 수 있다
                > 패키지를 확인했을 때 중요 패키지이거나(삭제 할 때) 찾을 수 없는 패키지라면(설치 할 때) 의존성 오류 무시