ls
-대상
    생략    : 현재 위치한 디렉토리 내부의 목록을 확인
    파일    : 파일 자체에 정보를 확인
    디렉토리: 디렉토리 내부의 목록을 확인
-옵션
    l  :(L , 엘)자세한 정보 출력
    a  :숨겨진 항목들 출력
    d  :대상이 디렉터리(directory)인 경우에 대상 자체의 정보를 출력함(디렉터리가 아닌 대상으로는 적용되지 않는다.)
    * l(엘)옵션 정보 예시
    R  :(대문자)대상이 디렉터리(directory)인 경우에 하위 디렉토리가 있다면 하위 디렉토리의 내부까지 출력함

    drwx------.  3 itbank itbank  78  9월 16 23:20 itbank

    d           : 대상 객체의 형식(- : 일반 파일 , d : 디렉터리(directory), l : 바로가기(Symbolic link file ... ))
    rwx------.  : 허가권
    3           : 링크(link) 개수
    itbank itbank   : 소유권
    78              : 크기(byte 단위, 디렉토리(directory는 정확한 크기 X))
    9월 9 20:24     :마지막으로 수정된 날짜와 시간


--------


기본 디렉토리
-시스템이 설치 되었을 떄 기본적으로 생성되어 있는 디렉토리
    > 개수가 굉장히 많지만 / 디렉토리 아래에 있는 항목들만 확인
-   /디렉토리는 Linux 시스템의 최상위 디렉토리 Linux를 구성하는 모든 파일과 디렉토리는 전부 / 아래에 있다.(Tree 트리 구조로 되어 있다)
-   / 아래에 있는 기본ㄴ 디렉토리들은 시스템 구성에 있어서 중요한 역할을 하고있다. (->기호는 바로가기(symbolic link를 의미 , symbolic link는 윈도우의 바로가기와 비슷하다.))

bin     : 모든 사용자가 사용할 수 있는 공용 명령어들이 들어있는 디렉토리
boot    : 부팅에 필요한 각종 파일들이 모여있는 디렉토리
dev     : 장치 파일이 생성되는 디렉토리
etc     : 
home    : 일반 사용자들의 홈 디렉토리가 생성되는 디렉토리 (*여기서 말하는 홈 디렉토리는 사용자 개인의 디렉토리를 말한다.)
lib     : 라이브러리가 모여있는 디렉터리
lib64   : 64bit 전용의 라이브러리가 모여있는 디렉토리
media   : remote device를 인식했을 떄 연결해주는 디렉토리
opt
root    : 관리자(root)의 홈 디렉토리
sbin    : 관리자만 할 수 있는 명령어(시스템 제어 명령어)들이 들어있는 디렉토리


--------


cp
    - copy , 복사 + 붙혀넣기를 한번에 함
    - 기본적으로 파일만 복사가 가능
        > 디렉토리의 복사는 별도의 옵션이 필요함
    - 원본 파일과 같은 이름으로 or 원본 파일과 다른 이름으로 복사 가능
        > 이름을 바꿔서 복사할 때는 원본을 하나만 입력(1:1 복사만 가능)
    - 형식
        cp [옵션] 원본 [원본] ... [원본] 복사할위치[+이름]
        (*이름을 원본과 같게 입력하거나 생략하면 원본과 같은 이름으로 복사하며 , 원본과 다른 이름을 입력하면 해당 이름으로 변경되어서 복사함)
    -예시
        cp ./hello.txt ./itbank/
        cp ./hello.txt ./itbank/hello.txt
        cp ./*.txt ./itbank/
        cp ./hello.txt ./hello2.txt ./itbank/
        

--------


mv
    -move , 이동(잘라내기 + 붙혀넣기)
    -파일과 디렉토리 전부 이동 가능
    -원본 파일과 같은 이름으로 이동하거나 원본 파일과 다른 이름으로 이동하는게 가능하다. (다만, 이름을 바꿔서 이동할때는 원본을 하나만 입력할 수 있다.)
    -형식
    mv [옵션] 원본 [원본] ... [원본] 이동할위치[이름]
    -예시
    mv ./*.txt ./itbank/
    mv ./hello.txt ./itbank/hellooo123.txt
    


--------


mkdir
    - make directory 디렉토리 생성
    - 생성할 디렉토리 경로가 존재하지 않으면 생성이 불가능하다(다만 옵션을 사용하여 경로까지 함께 생성할 수 있다.)
    - 옵션
        -p : 생성할 디렉토리의 경로까지 함께 생성(상위 디렉토리까지 생성)
    - 예시
        mkdir itbank3
        mkdir -p ./itbank4/itbank5


--------


rmdir
    -remove directory 디렉토리 샂게
    -디렉토리 내부에 다른 파일 / 디렉토리가 있다면 삭제가 불가능하다
    -옵션
        -p : 디렉토리 삭제 후 상위 디렉토리가 비어 있는 경우 함께 삭제


--------


rm
    -remove 삭제
    -기본적으로 파일 삭제 가능(디렉토리를 삭제하고싶은 경우 옵션을 이용하여 삭제한다.)
    -옵션
        r : 디렉토리까지 삭제
        f : 확인과정을 생략하고 삭제
    -예시
    rm -rf ./itbank/*
    rm -rf ./*


--------

alias
    -임의의 키워드에 명령어[에 옵션까지] 등록함
    -해당 키워드로 등록된 명령을 대체해서 사용함
    
    -형식
        alias                           : 등록된 내용 확인
        alias 키워드='명령어 [옵션]'    : 키워드 등록

    -예시
        alias
        alias p="pwd"
        alias p='pwd'
        alias lll = "ls -alR"
        

--------


cat
    -사용 형식
        cat         : 입력한 내용을 출력(정규 표현식 or shell script 에서 많이 사용함.)
        cat 파일명  : 파일의 내용을 출력함.
        cat > 파일명: 입력한 파일명의 이름으로 파일을 생성하며, 생성함과 동시에 사용자를 간단하게 입력할 수 있게 해줌(vi에디터가 아님.) 다만 이미 파일명이 현재 디렉토리에 있을때는 덮어씌운다. 경고문은 뜨지 않는다.

    -예시
    cat
    cat hello.txt
    cat > hello.txt


--------

touch
    -빈 파일 생성. 디렉터리를 생성하지 않는다.(디렉터리 생성 명령어 : mkidr)
    -파일/디렉토리를 대상으로 하여 최종 수정된 날짜와 시간을 갱신한다.

    -예시
    touch hello.txt
    

--------


head
    -파일의 첫 줄부터 10줄 출력
    
    -옵션
        -숫자 : 숫자만큼의 줄 출력

    -예시
    head hello.txt
    head -20 hello.txt
    head -30 hello.txt
    

--------


tail
    -파일의 마지막 줄부터 10줄 출력
    -옵션
        -숫자 : 숫자만큼 줄 출력
    -예시
    tail hello.txt
    tail -30 hello.txt
    

--------

기호
.   :현재 디렉토리 (단, 파일/디렉토리 이름 앞에 붙어있으면 숨김 처리가 된다.)
cat ./hello.txt
cd ./test_dir



..  :상위 디렉토리
cd ../test_dir2
cd ../../
cat ../test1.txt



~   :사용자의 홈 디렉토리
cd ~



*   :모든 것(모든 종류와 길이의 문자를 표현할 수 있음.)
cp ./*.txt ../test_dir2
cp ./* ../


>   :기호 왼쪽 명령어가 동작하여 나오는 출력 내용을 기호 오른쪽에 저장함(> : 덮어쓰기, >> : 내용 추가)


|   :(파이프(pipe), shift + \)CLI, CUI의 단점인 '한 줄에 명령어 하나'를 보완하는 기오로써 하나의 대상에 여러 명령어를 적용시킬 수 있다.

ls -al /etc/ | more
more (ls -l /etc/)

위의 두 문장은 같은 뜻을 가진다.


--------


more
    -출력되는 내용이 너무 많을 때 화면 높이에 맞춰서 내용을 나누어 출력함

    -동작 후 추가 입력 키

    -지나간 내용을 다시 볼 수는 없다.

    -일반적으로는 다른 명령어와 (파이프 기호(|)를 통해)함께 사용하는게 보편적이다.

    enter       : 한 줄 넘어가기
    spacebar    : 한 화면 넘어가기
    q           : more 중간에 종료

    -예시 
    more hello.txt
    ls -al /etc/ | more
    

--------

nl
    -출력 내용에 줄 번호 붙여주는 명령어
    -일반적으로는 다른 명령어와 함께 사용한다.
    -예시:
    (*ls -l /etc/ , less , nl 총 3가지 명령어를 한 줄로 작성하여 /etc/ 내부 목록에 줄 번호 붙여서 less 적용시켜보기)
    ls -l /etc/ | nl | less


--------

wc
    -파일의 내용이 몇 줄, 몇 단어, 몇 글자인지 출력함
    -예시
        l : 몇 줄인지 출력(줄은 enter를 기준으로 구분)
        w : 몇 단어인지 출력(단어는 spacebar , enter를 기준으로 구분. enter또한 하나의 단어로써 취급한다.)
        c : 몇 글자인지 출력(공백문자=sapcebar, 개행문자=enter 각각 한 글자로 취급)


    
    
    예시:
    wc hello.txt

    출력 예시:
     34 99   511  hello.txt
     줄 단어 글자 검사한 파일

    
    
    
    추가예시 :
        wc -l hello.txt
        wc -w hello.txt
        wc -c hello.txt


--------    


cal
    -형식
    cal             :운영체제 설졍된 날짜와 시간을 기준으로 현재 월의 달력을 출력
    cal 숫자1       :숫자를 년도로 사용하여 해당 년도의 전체 달력을 출력
    cal 숫자1 숫자2 :숫자2를 년도로 숫자1을 월로 사용하여 해당 년월의 달력을 출력

    -입력예시
    cal
    cal 1
    cal 1 2




--------

ftp
    -file transfer protocol; 파일 전송에 대한 통신 규칙/약속

ftp server 
    -파일 전송을 위한 서버 (클라이언트가 서버에 접속하여 자신의 파일을 서버에 저장(업로드)하거나 서버의 파일을 클라이언트에 저장 및 제공(다운로드) 할 수 있다)

    -설치 및 사용을 위한 작업
    1.linux 환경에서 입력해야할 것들(ftp server로 사용)
        yum -y install vsftpd-*                     : ftp 서비스 설치
        systemctl restart vsftpd                    : ftp 서비스 동작
        systemctl enable vsftpd                     : 부팅 시 ftp 서비스 자동 동작
        firewall-cmd --permanent --add-service=ftp  : 방화벽 예외 규칙에 ftp 서비스 추가
        firewall-cmd --reload                       : 방화벽 예외 규칙 적용
    2.windows 환경에서 해야할것들(ftp client로 사용)
        '제어판' > '시스템 및 보안' > 'Windows 방화벽에서 앱 허용' 으로 이동
        '허용되는 앱 및 기능(A):' 밑에 있는 테이블에서 '파일 전송 프로그램 찾기'
        '파일 전송 프로그램' 바로 왼쪽에 있는 박스를 포함하여, 오른쪽에 있는 '개인', '공용' 에 있는 박스에도 체크넣기

        (*만약 '파일 전송 프로그램'을 찾을 수 없다면 아래 방법을 이행)
        '허용되는 앱 및 기능(A):'테이블 박스 아래에 '다른 앱 허용(R)...'를 눌러 '앱 추가'창을 띄움  
        '앱 추가'창에서 '찾아보기(B)...'를 누른다.
        사용자의 로컬디스크에 Windows 파일에 ftp.exe 를 찾고, 더블클릭 한다.(*예시 : C:\Windows\System32\ftp.exe)
        '앱 추가'창에서 '앱(P):'박스 안에 '파일 전송 프로그램'을 누르고 아래의 '추가'버튼을 누른다.
        
        해당 과정을 완료했으면 위의 windows 환경에서 해야할것들 과정을 다시 거친다.

    -사용방법
    1.접속
        (ftp client = windows에서 접속)
        cmd -> ftp에 사용할 폴더로 이동 -> ftp <Linux IP> -> 사용자 로그인(root 접속 X)
        (*fpt에 사용할 폴더와 로그인 한 사용자의 홈 디렉토리 간의 파일 전송이 가능함)
        (*ftp <Linux IP> 예시 : ftp 127.168.10.128)
    2.파일전송
        -업로드(client가 자신의 컴퓨터에 있는 파일을 ftp server에 저장(복사))
            put 파일명 (*/업로드 할 파일이 ftp에 사용할 폴더 안에 있는 상태에서 입력)
        -다운로드(client가 server에 있는 파일을 내 컴퓨터에 저장(복사))
            get 파일명 (*다운로드 할 파일이 로그인 한 사용자 홈 디렉토리 안에 있는 상태에서 입력)



--------


vi
    -Linux 에서 기본적으로 제공하는 문서 편집기(CLI,CUI 황경에서 사용함)
    -사용환경
        명령 모드 : 기본 사용 환경, 커서 이동, 복사/잘라내기/붙혀넣기, 삭제, 입력/실행 모드 전환
        입력 모드 : 문서의 내용을 변경하기 위한 환경, 내용 추가/수정/삭제, 명령 모드 전환 가능
        실행 모드 : 그 위 대부분의 기능들을 사용하기 위한 환경, 명령 모드 전환

        -입력 모드와 실행 코드 간의 전환은 불가능
    -vi 에디터 실행
        vi
        (*빈 파일 열기)
        vi 파일명
        (*파일 명 열기. 예시 : vi hello.txt)
    
    -명령 모드 사용 방법
        -입력 모드 전환
            i : 커서 왼쪽으로 내용 입력 
            I : 커서가 있는 줄 왼쪽으로 내용 입력

            a : 커서 오른쪽으로 내용 입력
            A : 커서가 있는 줄 오른쪽으로 내용 입력

            o : 커서 아래로 빈 줄 삽입 후 내용 입력
            O : 커서 위로 빈 줄 삽입 후 내용 입력

            s : 커서가 있던 글자를 지우고 내용 입력
            S : 커서가 있던 줄을 지우고 내용 입력
        
        -실행 취소(undo) , 다시 실행(redo)
            u        : 실행 취소(되돌리기)
            ctrl + r : 다시 실행

        -삭제
            x : 커서 오른쪽 글자 삭제(delete키와 같은 일을 하나, 커서 오른쪽에 지울 글자가 더 없다면 커서 왼쪽 글자 삭제(backspace 키와 동일))
            X : 커서 왼쪽 글자 삭제(backspace키와 같은 일을 하며, 지울 글자가 더 없다면 작동하지 않는다.)

        -복사 , 잘라내기 ,붙혀넣기
        yy : 커서가 있는 줄 복사
        숫자 + yy : 커서가 있는 줄 부터 숫자만큼의 줄 복사
        dd : 커서가 있는 줄 잘라내기
        숫자 + dd : 커서가 있는 줄 부터 숫자만큼 줄 잘라내기
        p(소문자) : 커서 아래로 붙혀넣기
        P(대문자) : 커서 위로 붙혀넣기

        -글자 단위 커서 이동
            k : 상
            j : 하
            h : 좌
            l : 우

        -단위 단위 커서 이동
            w : 다음 단어의 첫 글자로 이동
            b : 이전 단어의 첫 글자로 이동
            e : 다음 단어의 마지막 글자로 이동

        -줄 내부 커서 이동
            0 : 줄의 첫 글자로 이동
            $ : 줄의 마지막 글자로 이동

        -화면 내부 커서 이동
            H : 화면의 첫 줄로 이동
            M : 화면의 가운데 줄로 이동
            L : 화면의 마지막 줄로 이동

        -문서 내부 커서 이동
            gg : 문서의 첫 줄로 이동(= [[)
            G : 문서의 마지막 줄로 이동(= ]])
    -실행 모드 사용 방법
        -검색
            /Pattern : 위에서 아래로 Pattern 검색
            ?Pattern : 아래에서 위로 Pattern 검색
            (*
            /user : 위에서 아래로 user 이라는 단어 검색
            ?user : 아래에서 위로 user 이라는 단어 검색
            )
            

            n : 검색 방향으로 다음 찾기
            N : 검색 방향의 반대로 다음 찾기
            (Windows 의 메모장처럼 위에서 아래로, 아래에서 위로 검색이 다 끝난다면 끝내는게 아니라, chrome과 vs code의 F3 , ctrl + f 처럼 계속 누르다보면 문서의 끝으로 이동해서 다시 키워드를 검색해준다. 좀 더 편리한점은, Windows의 메모장처럼 '더이상 없다'라는 신호도 보내준다는거다.)

        -줄 번호 출력 / 숨기기
            :set nu    (*줄 번호 보이기)
            :set nonu  (*줄 번호 숨기기)
        
        -찾아서 바꾸기(치환)(*찾아서 바꾸게 된다면, 범위내에서 나오는 모든 것을 바꾼다.(한 줄에 여러개일경우 문제가 생길 수 있다.))
            
            :[범위]s/찾을내용/바꿀내용/[범위]

            [범위]의 종류
                생략    : 커서가 있는 줄에서 내용을 찾아서 변경함
                n       : n번째 줄에 있는 내용을 찾아서 변경함
                :3s/home/user       (*3번쨰 줄 home이 있다면 home을 지우고 user로 바꾸기)
                n1,n2   : n1번째 줄부터 n2번째 줄에 있는 내용을 찾아서 변경
                :3,17s/home/user    (*3번째 줄부터 17번째 줄까지 home이 있다면 home을 지우고 user로 바꾸기)
                %       : 문서 전체에 있는 내용을 찾아서 변경
                :%/home/user        (*문서 전체에 home이 있다면 home을 지우고 user로 바꿈)
                :5,%/home/user      (*5번째 줄부터 문서 끝까지 home이 있다면, home을 지우고 user로 바꿈)

            옵션의 종류
                g : 한 줄에 찾는 내용이 여러개 있는 경우에 전부 변경
            
        -현재 사용 중인 파일 확인
            :f  : 현재의 파일명과 커서 위치 확인
        
        -리눅스 명령어 임시 사용
            :! <명령어>     (*vi를 잠시 멈추고 Linux 명령어 동작)
            :! ll (*vi를 잠시 멈추고 ls -al동작)

        -문서에 내용 삽입 (*:r, :r! 는 ':'와 r 사이에 숫자를 넣어서 특정 줄 아래로 삽입이 가능하기도 하다.)

            :.! <명령어>    (*커서가 있는 줄 내용을 지우고 Linux 명령어 동작 결과를 삽입(*화면에 결과가 출력되는 명령어를 사용))
            :.! ll (*vi의 커서가 위치한 줄의 내용을 지우고 ls -al 동작함)

            :r! <명령어>    (*커서가 있는 아래쪽에 Linux 명령어 동작 결과를 삽입 (*화면에 결과가 출력되는 명령어를 사용))
            :r! ll (*vi의 커서가 위치한 줄의 내용을 남기고, 그 아랫줄에 ls -al 동작함)
            :3r! hello.txt   (*3번째 줄 내용을 지우고 hello.txt내용을 삽입함)

            :r <파일명>     (*커서 아래쪽에 파일의 내용을 삽입함)
            :r hello.txt    (*커서 아래쪽에 hello.txt내용을 삽입함.)
            :3r hello.txt   (*3번째 줄 아래에 hello.txt내용을 삽입함)
        
        -저장 , 종료, 불러오기
            :w                  (*저장)
            :w inittab.txt      (*inittab.txt로 저장)
            :q                  (*종료)
            :wq                 (*저장하고 종료)
            :wq inittab.txt     (*inittab.txt로 저장하고 종료)
            :e hello.txt      (*기존 문서를 종료하고 hello.txt파일 불러오기)
            :enew               (*기존 문서를 종료하고 새 파일 편집 시작)

        -화면 분할
            ctrl + w + n : vi 화면 분할
            ctrl + w + w : 분할 화면 간 커서 이동





--------

find
    -검색하는 명령어
    -옵션을 검색할 내용으로 사용함

    -형식
    find 범위 [범위]...[범위] 옵션 값 [옵션] [값] ... [옵션] [값]

    -옵션
    name    : 이름으로 검색
    type    : 개체의 형식으로 검색(d : directory, f : file)
    newer   : 기준 파일 / 디렉터리 보다 늦게 수정된 개체 검색
    exec    : 일반적으로 마지막 옵션으로 사용하며, 검색 결과들을 대상으로 특정 명령어를 적용시킨다.

    -예시

    find / -name itbank
    (* /를 포함한 하위 디렉토리에서 이름이 itbank인 디렉토리만을 찾는다.)

    find / -name hello_itbank.txt -type f
    (* /를 포함한 하위 디렉토리에서 이름이 hello_itbank.txt 라는 '파일'을 찾는다.)

    find /home/itbank -newer test
    (* /home/itbank를 포함한 하위 디렉토리에서 test 디렉터리보다 늦게 수정/생성된 개체 검색)

    find /test /tmp -name "test*" exec rm {} \;
    (*/test 와 /tmp 의 각 디렉터리를 포함하여 하위 디렉토리에서 test로 시작하는 이름을 가진 파일을 rm(삭제)한다.)
    
    find /home/itbank -name "*itbank*" -type f -exec cat {} \;
    (*/home/itbank 디렉터리를 포함하여 하위 디렉토리에서 '파일'로 이루어진 요소에 itbank가 제목에 들어가있을 경우 해당 파일들을 cat(출력)한다. )


--------


date
    - 날짜와 시간을 출력함
    
    date              : 현재 날짜와 시간 출력
    date mmddhhMMyyyy : yyyy년 mm월 dd일 hh시 MM분으로 날짜와 시간 변경함

    -예시
        date
        date 122507252021
        


--------

rdate
    -인터넷에 존재하는 time 서버의 날짜와 시간을 출력함

    -형식
        radte [옵션] <time 서버 주소>

    -옵션
        s : time 서버의 날짜와 시간을 현재 장치에 적용시킴

    -예시
    rdate time.bora.net
    rdate -s time.bora.net


--------

shutdown -r now
reboot
init 6


--------


shutdown -h new
poweroff
init 0


--------


user&group
사용자&그룹
    -사용자 계정이란?
    >사람이 장치를 사용하기 위해 로그인하는 계정
    누가 어떤 작업을 했는지 멱확하게 알기 위해서 개개인에게 생성해주는 계정
    사용자 계정을 이용하여 파일/디렉토리 권한 설정이 가능하다
    (같은 파일을 누구는 보고 누구는 못보는 등의 작업 범위 지정이 가능)

    -그룹이란?
    >사용자 계정을 묶어서 관리하기 위해 사용하는 계정
    관리자가 주로 제어하며(그룹 생성/수정/삭제, 그룹에 사용자 계정을 소속시키는 등)
    그룹에 권한을 부여하여 그룹에 소속된 사용자들이 동일한 권한을 적용받도록 할 수 있다.

사용자 계정
    -사용자 계정에 관련된 파일
        /etc/passwd     :사용자의 일반 정보가 들어있는 파일
            (*보는 방법 : itbank:x:1000:1000:dust:/home/itbank:/bin/bash)
            itbank      :사용명, 뒤의 정보들이 어느 사용자의 정보인지 표시함
            x           :암호이지만, 보안상의 이유로 passwd파일에는 암호를 표시하지 않는다.
            1000(왼쪽)  : UID, 이 사용자의 고유 번호
            1000(오른쪽): GID, 이 사용자가 소속된 주요 그룹의 고유 번호
            dust        :사용자 별칭(계정명 or ID로 사용 X, 표시되는 이름)

            (*여기서 말하는 UID, GID는
                UID :  User ID, 사용자에게 부여되는 고유 번호 
                GID :  Group ID, 그룹에게 부여되는 고유 번호 )
            (*   이란, 사용자가 입력한 명령어를 해독하는 해독기이며 운영체제(커널)에 명령을 전달해주는 역할을 한다. 현재 linux시스템에 설치된 shell은 /etc/shells 파일에서 확인이 가능하다.
            passwd 파일에 저장된 정보 중 shell 위치에 /sbin/nologin이 들어간 경우 해당 계정은 system or service 계정이다.(/sbin/nologin은 명령어 사용 shell 이다, 로그인을 하지 못하게 만드는 shell))
    
        /etc/shadow     :사용자의 고급 정보가 들어잇는 파일
            (*보는 방법 : itbank:$6$~~$~~~:18894:0:99999:7:::
            itbank      : 사용자명, 뒤의 정보들이 어느 사용자의 정보인지 표시한다.
            $6$~~$~~~   : 암호이다. 사용자가 로그인 할 경우 사용하는 비밀번호를 암호화하여 저장한다.
            18894       : 암호 생성 일자(1970년 1월 1일을 기준으로 몇일째에 생성된 암호인지 표시한다. 운영체제 설치 시 저장된 암호는 생성 일자가 표시되지 않는다.)
            0           : 암호 최소 사용 일자(변경불가기간)
            99999       : 암호 최대 사용 일자(만료 일자)
            7           : 암호 만료 전 경고 일자
            )

        /etc/login.defs : 사용자와 그룹 계정 및 삭제와 관련된 몇몇 정보들이 들어있는 파일


        
    -사용자 암호 변경
        passwd          : 명령어를 입력한 사용자 자신의 암호 변경(모든 사용자가 사용 가능)
        passwd 계정명   : '계정명' 사용자의 암호 변경(관리자만 사용 가능)
        passwd itbank   : itbank 사용자의 암호 변경(관리자만 사용 가능)
    
    -사용자 계정 생성
        useradd [옵션] [값] ... [옵션] [값] 사용자명

            옵션들 :
            c : 별칭 지정
            useradd -c testuser user2 (*user2를 추가하면서 testuser이라는 별명도 같이 넣는다.)

            s : shell 지정(system에 설치된 shell 지정 -> /etc/shells 파일에서 확인 가능)
            useradd -c testuser -s /bin/sh user2 (*user2를 추가하면서 testuser이라는 별명을 같이 넣고서 shell은 /bin/sh 라는 shell로 지정한다.)

            d : 홈 디렉토리의 경로와 이름 지정(반드시 경로와 이름 전부 절대경로로 작성)
            useradd -d /jong/ro user3 (*user3를 추가하면서 /jong/ro 디렉토리를 홈 디렉토리로 지정함. /etc/login.defs 파일 CREATE_HOME 설정이 없거나 no로 되어있으면 -m 옵션과 함께 사용)

            m : make directory

            k : 기본값 /etc/skel이 아닌 다른 디렉토리를 skel로 지정, 반드시 m 옵션과 함께 사용함.

            D : 사용자 생성 시 적용되는 기본 정보 확인한다. 그저 확인하는것만이 가능하니 사용자 계정을 생성할 수는 없다. 추가 옵션을 함께 사용하여 기본 정보 변경 할 수 있다.(예시 : d 옵션을 함게 사용하면 홈 디렉토리 생성 위치 변경이 가능하다.)
            



            /etc/skel   : 사용자 홈 디렉토리의 뼈대가 되는 디렉토리
                         사용자 생성 시 홈 디렉토리 내부에 복사할 파일/디렉토리들을 넣어놓는다
                         > 사용자 생성 시 홈 디렉토리 내부에 특정 파일/디렉토리 자동으로 생성 가능

            /etc/default/useradd     : 사용자 생성 시 적용되는 기본 정보가 저장된 파일이며 이 파일의 내용을 변경하면 useradd의 옵션을 사용하지 않아도 같은 효과를 볼 수 있다.


        문제 예시 :
        사용자 user7을 생성한다. (단 옵션을 사용하지 않고 아래의 정보가 적용되도록 설정 후 생성한다.)
        shell 의 이름 : tcsh
        홈 디렉토리 생성 위치 : /test
        skel 로 사용할 디렉토리 : /skelkg

        풀이 :

        mkdir /test (*홈 디렉토리 설정을 위한 /test 생성)

        cp -r /etc/skel /skelkg (*skel로 사용할 디렉토리 생성)

        vi /etc/default/useradd
        (*useradd 명령어의 기본정보가 담긴 파일로 vi 진입)

        (*
        #useradd default file
        GROUP=100
        HOME=/jong
        INACTIVE=-1
        EXPIRE=
        SHELL=/bin/bash
        SKEL=/etc/skel
        CREATE_MAIL_SPOOL=yes
        )
        HOME=/jong 을 HOME=/test 로 변경 
        SHELL=/bin/bash 를 SHELL=/bin/tcsh
        SKEL=/etc/skel 을 SKEL=/skelkg

        touch /skelkg/test7
        (*test7용 skel파일 제작)

        useradd user7
        (*user7 유저 추가)

        tail -1 /etc/passwd
        (*필수 아님. 잘 추가됐는지 확인)
    
    -사용자 계정 정보 수정
        usermod 옵션 값 [옵션] [값] ... [옵션] [값] 사용자명

        (*옵션은 useradd 의 옵션을 대다수 사용할 수 있다.)

        문제 예시 :
        모든 사용자의 홈 디렉토리를 /export/home/<username> 으로 변경
        (*잘못 만들어서 홈 디렉토리가 없는 경우에는 사용자 정보만 수정)

        사용자의 shell은 bash shell, 별칭은 전부 없도록 정보 수정
        (별칭 제거 시 '' 사용)

        풀이 :
        
            mkdir -p /exprot/home
            
            tail -8 /etc/passwd
            (*해당 운영체제에 관련된 (관리자를 제외한) 유저들에 대한 정보를 출력하는 명령어.
            이 명령어와 출력문을 통해서 해당 유저가 별칭을 갖고있는지, 홈 디렉토리은 어디인지, 쉘은 뭘 쓰는지 등등의 정보를 확인한다.)

            usermod -c '' -d /export/home/itbank itbank
            (* -c '' 는 itbank itbank의 별명을 없애는 역할을 한다.
               -d /export/home/itbank 는 itbank
                itbank 는 앞서 입력했던 옵션들과 값들의 목표가 되는 유저를 뜻한다.
            )

            mv /home/itbank /export/home
            (* /home/itbank 는 해당 명령 이행 이전에 쓰이던 itbank 유저의 홈 디렉토리를
            /export/home 으로 옮기기 위함이다.
            )

            usermod -d /export/home/user1 user1
            (*user1의 홈 디렉토리를 /export/home/user으로 변경.)
            usermod -d /export/home/user4 user4
            (*user4의 홈 디렉토리를 /export/home/user4으로 변경.)
            usermod -d /export/home/user5 user5
            (*user5의 홈 디렉토리를 /export/home/user5으로 변경.)
            usermod -d /export/home/user7 user7
            (*user7의 홈 디렉토리를 /export/home/user7으로 변경.)
            usermod -d /export/home/user2  -c '' -s /bin/bash
            (*user2의 홈 디렉토리를 /export/home/user으로 변경하고 별칭을 제거하며 사용자에 배정된 shell을 /bin/bash 로 바꾼다.)
        
            mv /home/user* /export/home/
            (* /home/디렉토리 안에 user가 디렉토리 앞에 포함된 경우에 예외없이 /export/home/으로 옮긴다.)

            usermod -d /export/home/user3 user3
            (*user3의 홈 디렉토리를 /export/home/user3으로 변경.)

            mv /jong/ro /exprot/home/user3
            (*원래 user3의 홈 디렉토리였던 /jong/ro 디렉토리를 /export/home/user3로 옮긴다.)


            usermod -d /export/home/user6 user6
            (*user6의 홈 디렉토리를 /export/home/user6으로 변경.)
            mv /jong/user6 /export/home
            (*원래 user6의 홈 디렉토리였던 /jong/user6 디렉토리를 /export/home으로 옮긴다.)

        
    -사용자 계정 삭제
            userdel [옵션] 사용자명

            옵션 :
            r : 사용자의 홈 디렉토리나 메일함 등 사용자 소유의 개체들을 함께 삭제

    -그룹
        -사용자 계정을 그룹에 소속시켜서 사용함(= 사용자 계정들을 하나의 그룹으로 묶어준다.)
            > 그룹을 대상으로 권한을 부혀아여 그룹에 소속된 모든 사용자가 동일한 권한을 적용 받음

        - 사용자가 그룹에 소속되는 방법을 두가지로 분류
        1. 사용자가 그룹을 자신의 주요 그룹으로 사용(=gid로 사용)
        2. 사용자가 그룹에 일반 소속되어 사용함.            
        
        -그룹에 관련된 파일 
            /etc/group      :그룹의 일반 정보가 들어있는 파일 
            *파일 내용 보는 방법
            itbank:x:1000:

            itbank  : 그룹 이름, 뒤의 정보가 어느 그룹의 정보인지 알려준다.
            x       : 암호, 그룹에는 별도의 암호를 지정하지 않는다.
            1000    : gid, 해당 그룹의 고유 번호
            <마지막 필드(*현재 예시에는 공백 상태)>
                    : 그 그룹에 일반 소속된 사용자들의 목록 출력

        -그룹 생성
            groupadd [옵션] [값] ... [옵션] [값] 그룹명

            

            옵션 :
            g : 생성되는 그룹의 GID 지정

            예시 :
            groupadd test_group (*test_group이라는 이름의 그룹을 생성함)
            groupadd -g 1234 test_group (*test_group이라는 이름의 그룹을 GID가 1234인 상태로 생성함.)

        -그룹 정보 수정
            groupmod 옵션 값 [옵션] [값]  ... [옵션] [값] 그룹명

            옵션 : 
            g : 그룹의 gid 지정
            n : 그룹의 이름 지정 

            예시 :
            groupmod -g 4321 test_group (*test_group의 GID를 4321로 변경함)
            groupmod -n ghdwpaks test_group (*test_group라는 이름의 그룹을 ghdwpaks 이라는 이름의 그룹으로 이름변경을 함)
            groupmod -g 7904 -n ghdghdwpaks ghdwpaks(*ghdwpaks이라는 이름의 그룹의 GID를 7904로 바꾸고 이름도 ghdghdwpaks으로 변경함)

        -그룹 삭제
            groupdel 그룹명
            (*사용자가 주요 그룹(gid)로 사용중인 그룹은 삭제하지 못한다.)

        - 사용자 + 그룹
        1. 사용자를 만들면 같은 이름의 그룹이 자동으로 생성된다 (*사용자는 함께 만들어진 그룹을 자신의 주요 그룹(GID)으로 사용한다)
        2. 사용자가 일반 소속된 그룹과 사용자의 주요 그룹은 언제든지 변경 가능하다.
            1)GID 변경  > 사용자 계정 정보를 수정(= usermod)
            2)일반 소속된 그룹 변경 > 사용자 계정 정보를 수정(= usermod)
                                    > gpasswd 명령어 사용
        
        -gpasswd
            -그룹에 소속된 일반 사용자 목록을 제어

            -사용 형식
                gpasswd 옵션 사용자명 그룹명

            -옵션들 :
                a : 그룹에 사용자를 일반 소속 
                d : 그룹의 일반 사용자 목록에서 특정 사용자 제거

            -예시 :
                gpasswd -a user12 test_group (*user12를 test_group에 소속시킴)
                gpasswd -d user12 test_group (*user12를 test_group에 소속제외시킴)

        
        -id
            -사용자의 UID와 GID, 소속된 그룹의 목록 확인
            - 사용 형식
                id <사용자명>

            


--------




--------




--------




--------




--------




--------




--------




--------

